// MIT License

// Copyright (c) 2020-2021 The Ministry of Housing and Urban Affairs, GoI
// Copyright (c) 2020-2021 National Institute of Urban Affairs

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// v0.0.1

syntax = "proto3";
package atcs_traffic_signal_realtime;
option java_package = "in.gov.mohua.ds.transit";

import "Header.proto";
import "Location.proto";

message FeedMessage {
    // Metadata
    Header header = 1;

    // Information about all the junctions in the system.
    repeated Junction junction = 2;
}

// A Junction is a physical  point where at least two roads meet, hence traffic can change between different routes and/or directions at it.
message Junction {
    // Unique ID of the junction.
    string id = 1;
    
    // Gives operational status of the junction.
    OperationalStatus operationalStatus = 2;
    
    // Information on each carriageway inbound and outbound from the junction.
    repeated Carriageway carriageway = 3;
}

// Information about the Carriageway. A Carriageway is a set of TrafficLanes which follow a common direction in the beginning and then splits.
message Carriageway {
    // Unique ID for the way.
    string id = 1;
    
    message VehicleDensity {
        // Estimate of the vehicle count (rounded to int) crossing the way every minute. Value is 0 if there is no data available.
        uint32 vehicleCountPerMinute = 1;
        // Estimate of the vehicle count (rounded to int) crossing the way every hour. Value is 0 if there is no data available.
        uint32 vehicleCountPerHour = 2;
        // Estimate of the vehicle count (rounded to int) crossing the way every day. Value is 0 if there is no data available.
        uint32 vehicleCountPerDay = 3;
    }
    VehicleDensity vehicleDensity = 2;

    // Gives operational status of the junction.
    OperationalStatus operationalStatus = 3;

    // Lane level information for the way.
    repeated TrafficLane trafficLane = 4;
}

// A TrafficLane is a section of a carriageway that is designated (usually by lines of other physical barriers as bollards) to be used by a single line of vehicles to organise traffic and guide drivers
// Describes a direction of travel. Although a way can have multiple traffic lanes in each direction, this structure groups them and represents all traffic in one direction per TrafficLane.
message TrafficLane {
    // Unique ID of the lane.
    string id = 1;
    
    message SignalTiming {
        // Time in seconds allocated to the green signal for this lane. This is set manually by an operator. 
        // 0 value means there is no data available.
        uint32 allocatedGreenSeconds = 1;
        // Time in seconds available for the green signal. This can be equal to or more than the allocatedSeconds. It would exceed allocatedSeconds in a case where previous lanes (round robin manner) are under saturated (relatively free). Unoccupied time from the previous lane will be added to this time. 
        // 0 value means there is no data available.
        uint32 availableGreenSeconds = 2;
        // Time in seconds for which this lane was utilised to clear the traffic. This will will never exceed the availableSeconds but it can be less than the availableSeconds if traffic density is low. In this case remaining time will be added to the availableSeconds of the next lane.
        // This datapoint won't be available if the signal is green as the system is yet to compute the utilised time.
        // 0 value means there is no data available.
        uint32 utilisedGreenSeconds = 3;
    }
    SignalTiming signalTiming = 2;

    enum SignalStatus {
        // Traffic can pass.
        SIGNAL_GO = 0;
        // Traffic should stop at a designated place.
        SIGNAL_STOP = 1;
    }
    // Indicates if the traffic can pass or must stop.
    SignalStatus signalStatus = 3;

    OperationalStatus operationalStatus = 4;
}

// Corridor is a set of junctions. One junction can be part of multiple corridors.
message Corridor {
    // Unique ID allocated to the corridor.
    string corridorId = 1;
    // Name of the corridor.
    string corridorName = 2;
    // List of all junction IDs in the corridor.
    repeated string junctionId = 3;
}

enum OperationalStatus {
    // Status is not known.
    STATUS_UNKNOWN = 0;
    // Everything is operating normally.
    STATUS_NORMAL_OPERATION = 1;
    // This entity is closed due to maintainance.
    STATUS_UNDER_MAINTAINANCE = 2;
    // This entity is closed due to unknown reason.
    STATUS_CLOSED_OR_OFF = 3;
}
